=====================================
Literals
=====================================

fn function()
	-0
	0x0
	0xabc'def
	0o01234567
	"string"
	"\"string\""
	$register
	true
	'a'

---

(source (function
	(identifier) (block
		(integral) (integral) (integral) (integral)
		(string) (string) (register) (truth) (rune))))

=====================================
Let statements
=====================================

fn function()
	let identifier: type = value
	let identifier = value
	let identifier: type
	let identifier

---

(source (function
	name: (identifier)
	value: (block
		(let name: (identifier)
			type: (path (identifier))
			value: (path (identifier)))
		(let name: (identifier)
			value: (path (identifier)))
		(let name: (identifier)
			type: (path (identifier)))
		(let name: (identifier)))))

=====================================
Binary expressions
=====================================

fn function()
	1 + 1
	1 - 1 * 1
	1 + (1 - 1)
	1 + 1 / 1 % 1

---

(source (function
	(identifier) (block
		(binary (integral) (integral))
		(binary (integral) (binary (integral) (integral)))
		(binary (integral) (group
			(binary (integral) (integral))))
		(binary (integral) (binary (binary
			(integral) (integral)) (integral))))))

=====================================
Unary expressions
=====================================

fn function()
	--1 + &identifier
	!true

---

(source (function
	(identifier) (block
		(binary (unary (integral))
			(unary (path (identifier))))
		(unary (truth)))))

=====================================
Cast expressions
=====================================

fn function()
	1 as truth
	1 as i32 as truth

---

(source (function
	(identifier) (block
		(cast (integral) (path (identifier)))
		(cast (cast (integral) (path (identifier)))
			(path (identifier))))))

=====================================
Function calls
=====================================

fn function()
	function()
	let value = function()
	function(1, true, function())

---

(source (function
	name: (identifier) value: (block
		(call function: (path (identifier))
			arguments: (arguments))
		(let name: (identifier)
			value: (call function: (path (identifier))
				arguments: (arguments)))
		(call function: (path (identifier))
			arguments: (arguments (integral) (truth)
			(call function: (path (identifier))
				arguments: (arguments)))))))

=====================================
Function returns
=====================================

fn function()
	return identifier
	return

---

(source (function
	(identifier) (block
		(return (path (identifier)))
		(return))))

=====================================
Arrays
=====================================

fn function()
	let variable: [u8; 3] = [1, 2, 3]
	variable[0]

---

(source (function
	(identifier) (block
		(let (identifier)
			(array_type (path (identifier)) (integral))
			(array (integral) (integral) (integral)))
		(index (path (identifier)) (integral)))))

=====================================
Slices
=====================================

fn function()
	let variable: [u8;] = [][0:0]
	variable[:]

---

(source (function
	(identifier) (block
		(let (identifier)
			(slice_type (path (identifier)))
			(slice (array) (integral) (integral)))
		(slice (path (identifier))))))

=====================================
Pointers
=====================================

fn function()
	let variable: **u8 = 0 as *u8 as **u8
	&identifier!.field

---

(source (function
	(identifier) (block
		(let (identifier)
			(pointer (pointer (path (identifier))))
			(cast (cast (integral)
				(pointer (path (identifier))))
				(pointer (pointer (path (identifier))))))
		(unary (access (dereference
			(path (identifier))) (identifier))))))

=====================================
Function pointers
=====================================

fn function()
	let pointer: fn(argument: type) type = 0 as _
	pointer(argument).method()

---

(source (function
	(identifier) (block
		(let (identifier)
			(signature_type
				(variable (identifier) (path (identifier)))
				(path (identifier)))
			(cast (integral) (path (identifier))))
		(call (access (call (path (identifier))
			(arguments (path (identifier))))
			(identifier)) (arguments)))))

=====================================
If expressions
=====================================

fn function()
	if true: true
	if true:
		true
		true

---

(source (function
	(identifier) (block
		(when (branch (truth) (truth)))
		(when (branch (truth) 
			(block (truth) (truth)))))))

=====================================
When expressions
=====================================

fn function()
	let variable = when
		false: 0
		true: 1

---

(source (function
	(identifier) (block
		(let (identifier) (when
			(branch (truth) (integral))
			(branch (truth) (integral)))))))

=====================================
While loops
=====================================

fn function()
	while true: true
	while true: continue
	while true: 
		break
		return

---

(source (function
	(identifier) (block
		(while (truth) (truth))
		(while (truth) (continue))
		(while (truth) (block (break) (return))))))

=====================================
Construction
=====================================

fn function()
	new Structure field: true, field

---

(source (function
	(identifier) (block
		(new (path (identifier))
			(field (identifier) (truth))
			(field (identifier))))))

=====================================
Slice construction
=====================================

fn function()
	new [u8;] address: 0, size: 0

---

(source (function
	(identifier) (block
		(new (slice_type (path (identifier)))
			(field (identifier) (integral))
			(field (identifier) (integral))))))

=====================================
Nested construction
=====================================

fn function()
	new A a: (new A), b: new B

---

(source (function
	(identifier) (block
		(new (path (identifier))
			(field (identifier)
				(group (new (path (identifier)))))
			(field (identifier)
				(new (path (identifier))))))))

=====================================
Fields
=====================================

fn function()
	identifier.field
	(identifier).field
	(identifier).field.field

---

(source (function
	(identifier) (block
		(path (identifier) (identifier))
		(access (group (path (identifier))) (identifier))
		(access (access (group (path (identifier)))
			(identifier)) (identifier)))))

=====================================
Assignment
=====================================

fn function()
	identifier = true
	identifier()! =
		true

---

(source (function
	(identifier) (block
		(set (path (identifier)) (truth))
		(set (dereference (call (path (identifier))
			(arguments))) (block (truth))))))

=====================================
Compound assignment
=====================================

fn function()
	identifier += 0
	identifier -= 0
	identifier %= 0
	identifier &= 0
	identifier ^= 0

---

(source (function
	(identifier) (block
		(compound (path (identifier)) (integral))
		(compound (path (identifier)) (integral))
		(compound (path (identifier)) (integral))
		(compound (path (identifier)) (integral))
		(compound (path (identifier)) (integral)))))
