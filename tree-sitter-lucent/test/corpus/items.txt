=====================================
Comments
=====================================

fn function() // truth
	// true
	true

---

(source (function (identifier)
	(block (comment) (comment) (truth))))

=====================================
Functions
=====================================

fn function(first: type, second: type) truth
	true

---

(source
	(function
		name: (identifier)
		(variable
			name: (identifier)
			type: (path (identifier)))
		(variable
			name: (identifier)
			type: (path (identifier)))
		return: (path (identifier))
		value: (block (truth))))

=====================================
Void functions
=====================================

fn function(parameter: type)
	true

---

(source
	(function
		name: (identifier)
		(variable
			name: (identifier)
			type: (path (identifier)))
		value: (block (truth))))

=====================================
Expression functions
=====================================

fn function() truth = true

---

(source
	(function
		name: (identifier)
		return: (path (identifier))
		value: (truth)))

=====================================
Calling conventions
=====================================

cdecl fn function() truth = true

---

(source
	(function
		convention: (identifier)
		name: (identifier)
		return: (path (identifier))
		value: (truth)))

=====================================
Root functions
=====================================

root fn function() truth = true

---

(source
	(function
		root: (root)
		name: (identifier)
		return: (path (identifier))
		value: (truth)))

=====================================
Static variables
=====================================

static identifier: truth = true
static identifier: truth
static identifier = true

---

(source
	(static
		name: (identifier)
		type: (path (identifier))
		value: (truth))
	(static
		name: (identifier)
		type: (path (identifier)))
	(static
		name: (identifier)
		value: (truth)))

=====================================
Modules
=====================================

module Module
	module Module
		fn function()
			true

	static variable: truth

---

(source
	(module (identifier)
		(module (identifier)
			(function (identifier) (block (truth))))
		(static (identifier) (path (identifier)))))

=====================================
Structures
=====================================

data Structure
	field: truth
	other: truth

---

(source (data (identifier)
	(variable (identifier) (path (identifier)))
	(variable (identifier) (path (identifier)))))

=====================================
Annotations
=====================================

@annotation parameter
module Module
	static variable: truth

@@annotation parameter
@!annotation parameter

---

(source
	(module (annotation (identifier) (path (identifier)))
		(identifier) (static (identifier) (path (identifier))))
	(global_annotation (identifier) (path (identifier)))
	(annotation (identifier) (path (identifier))))

=====================================
Imports
=====================================

load "path" as identifier
load "path" as identifier with "path"
load identifier.function as fn function(_: type) type
load identifier.0x0000 as convention fn function()
load module.identifier.symbol as variable: type

---

(source
	(load (load_string (string) (identifier)))
	(load (load_string (string) (identifier) (string)))
	(load (load_symbol (path (identifier)) (identifier)
		(signature (identifier)
			(variable (identifier) (path (identifier)))
			(path (identifier)))))
	(load (load_symbol (path (identifier)) (integral)
		(signature (identifier) (identifier))))
	(load (load_symbol (path (identifier) (identifier))
		(identifier) (static (identifier) (path (identifier))))))

=====================================
Uses
=====================================

use "path"
use "path" as identifier
use identifier.*
use identifier

---

(source
	(use (string))
	(use (string) (identifier))
	(use (identifier) (wildcard))
	(use (identifier)))
